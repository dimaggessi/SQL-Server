USE EMPRESA_DB;

-- TOP
SELECT TOP 5 * FROM TB_CLIENTE
ORDER BY ClienteId ASC

-- ORDER BY
SELECT * FROM TB_CLIENTE
ORDER BY NomeCompleto DESC

-- WHERE
SELECT * FROM TB_PRODUTO WHERE Preco > 100;

-- OR
SELECT * FROM TB_PRODUTO WHERE Preco >= 30 OR Unidades >= 10;

-- AND
SELECT * FROM TB_PRODUTO WHERE Preco > 40 AND Unidades >= 20;

-- LIKE
SELECT * FROM TB_CLIENTE WHERE Cargo LIKE 'PROPRIETÁRIO';

-- LIKE (begin with)
SELECT * FROM TB_CLIENTE WHERE Cargo LIKE 'REPRESENTANTE%';

-- LIKE (end with)
SELECT * FROM TB_CLIENTE WHERE Cargo LIKE '%PEDIDOS';

-- LIKE (between)
SELECT * FROM TB_CLIENTE WHERE Cargo LIKE '% DE %';

-- DIFFERENT
SELECT * FROM TB_FUNCIONARIO WHERE Salario <> 5000;

-- BETWEEN
SELECT * FROM TB_FUNCIONARIO WHERE Salario >= 5000 AND Salario <= 9500;

SELECT * FROM TB_FUNCIONARIO Where Salario BETWEEN 5000 AND 9500;

-- IN
SELECT * FROM TB_ENDERECO WHERE Pais IN ('EUA', 'Suécia', 'França');

-- NOT IN
SELECT * FROM TB_ENDERECO WHERE Pais NOT IN ('EUA', 'Suécia', 'França');

-- IS NULL
SELECT * FROM TB_ENDERECO WHERE Regiao IS NULL;

-- IS NOT NULL
SELECT * FROM TB_ENDERECO WHERE FuncionarioId IS NOT NULL;

-- ISNULL(Field, '')
SELECT Logradouro, Cidade, Pais, ISNULL(Regiao, 'N/C') FROM TB_ENDERECO;

-- UNION (same columns quantity and types) - implicit distinct
SELECT NomeCompleto AS Empresa, Contato, Cargo FROM TB_CLIENTE
UNION
SELECT Empresa, Contato, Cargo FROM TB_FORNECEDOR;

-- UNION ALL - union without implicit distinct
SELECT Pais, 'CLIENTE' FROM TB_ENDERECO WHERE ClienteId IS NOT NULL
UNION ALL
SELECT Pais, 'FORNECEDOR' FROM TB_ENDERECO WHERE FornecedorId IS NOT NULL;

-- INTERSECT
SELECT Pais FROM TB_ENDERECO WHERE ClienteId IS NOT NULL
INTERSECT
SELECT Pais FROM TB_ENDERECO WHERE FuncionarioId IS NOT NULL;

-- EXCEPT (inverse of intersect)
SELECT Pais FROM TB_ENDERECO WHERE ClienteId IS NOT NULL
EXCEPT
SELECT Pais FROM TB_ENDERECO WHERE FuncionarioId IS NOT NULL;









